// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id      String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  password     String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  forms        Form[]
  responses    Response[]
}

model Form {
  form_id      String    @id @default(uuid())
  user         User      @relation(fields: [user_id], references: [user_id])
  user_id      String
  title        String
  description  String?
  is_active    Boolean   @default(true)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  questions    Question[]
  responses    Response[]
}

model Question {
  question_id  String    @id @default(uuid())
  form         Form      @relation(fields: [form_id], references: [form_id])
  form_id      String
  question_text String
  question_type QuestionType
  is_required  Boolean   @default(false)
  options      Option[]
  response_answers ResponseAnswer[]
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
}

model Option {
  option_id    String    @id @default(uuid())
  question     Question  @relation(fields: [question_id], references: [question_id])
  question_id  String
  option_text  String
  created_at   DateTime  @default(now())
  response_answers ResponseAnswer[]
}

model Response {
  response_id  String    @id @default(uuid())
  form         Form      @relation(fields: [form_id], references: [form_id])
  form_id      String
  user         User?     @relation(fields: [user_id], references: [user_id])
  user_id      String?
  submitted_at DateTime  @default(now())
  answers      ResponseAnswer[]
}

model ResponseAnswer {
  response_answer_id String    @id @default(uuid())
  response           Response  @relation(fields: [response_id], references: [response_id])
  response_id        String
  question           Question  @relation(fields: [question_id], references: [question_id])
  question_id        String
  answer_text        String?
  option             Option?   @relation(fields: [option_id], references: [option_id])
  option_id          String?
}

enum QuestionType {
  single_choice
  multiple_choice
  text_input
  paragraph
  rating
}